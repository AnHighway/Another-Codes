class Solution {
public:
    //堆调整
    void adujstbigheap(vector<int>&input,int size,int start)
    {
        int left=start*2+1;
        int right=start*2+2;
        int max_index=start;
        if(left<size&&input[left]>input[max_index])
        {
            max_index=left;
        }
        if(right<size&&input[right]>input[max_index])
        {
            max_index=right;
        }
        if(start!=max_index)
        {
            swap(input[start],input[max_index]);
            adujstbigheap(input,size,max_index);
        }
    }
    
    
    //建堆
    void BuildHeap(vector<int>&input,int size)
    {
        int start=size>>1;
        for(start;start>=0;start--)
        {
            adujstbigheap(input,size,start);
        }
    }
    
    //获取最小的K个数
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        vector<int>list;
        if(k>input.size())return list;
        
        
        for(int i=k;i<input.size();i++)
        {
            BuildHeap(input,k);
            if(input[i]<input[0])
                swap(input[i],input[0]);
        }
        
        for(int i=0;i<k;i++)
        {
            list.push_back(input[i]);
        }
        return list;
    }
};
