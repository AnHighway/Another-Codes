一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
方法1：
class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int *num1,int *num2) {
        set<int>st;
        set<int>::iterator iter;
        for(int i=0;i<data.size();i++)
        {
            if(st.find(data[i])==st.end())
            {
                st.insert(data[i]);
            }else{
                 iter = st.find(data[i]);
                st.erase(iter);
            }
        }
            iter=st.begin();
            *num1=*iter++;
            *num2=*iter;
        
        
    }
};

方法2：

首先：位运算中异或的性质：两个相同数字异或=0，一个数和0异或还是它本身。

当只有一个数出现一次时，我们把数组中所有的数，依次异或运算，最后剩下的就是落单的数，因为成对儿出现的都抵消了。

依照这个思路，我们来看两个数（我们假设是AB）出现一次的数组。我们首先还是先异或，剩下的数字肯定是A、B异或的结果，这个结果的二进制中的1，
表现的是A和B的不同的位。我们就取第一个1所在的位数，假设是第3位，接着把原数组分成两组，分组标准是第3位是否为1。如此，相同的数肯定在一个组，
因为相同数字所有位都相同，而不同的数，肯定不在一组。然后把这两个组按照最开始的思路，依次异或，剩余的两个结果就是这两个只出现一次的数字
class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2)
    {
          if(data.size()<2)
              return ;
          int size=data.size();
          int temp=data[0];
          for(int i=1;i<size;i++)
              temp=temp^data[i];
          if(temp==0)
               return ;
          int index=0;
          while((temp&1)==0)
          {
              temp=temp>>1;
              ++index;
          }
          *num1=*num2=0;
          for(int i=0;i<size;i++)
          {
              if(IsBit(data[i],index))//把按index位数右移后的数分为0，1两类，各自异或，就能分别得两个不同的数
                  *num1^=data[i];
              else
                  *num2^=data[i];
          }
    }
    bool IsBit(int num,int index)//判断这个数右移index位后再和1做按位与运算，那一位是否是1
    {
          num=num>>index;
          return (num&1);
    }    
};
