void QuickSort(int* h, int left, int right)
  {
     if(h==NULL) return;
     if(left>=right) return;
     
  //防止有序队列导致快速排序效率降低 
     srand((unsigned)time(NULL));
     int len=right-left;
    int kindex=rand()%(len+1)+left;
    Swap(h[left],h[kindex]);
    
    int key=h[left],i=left,j=right;
    while(i<j)
    {
        while(h[j]>=key && i<j) --j;
        if(i<j) h[i]=h[j];
        while(h[i]<key && i<j) ++i;
        if(i<j) h[j]=h[i];
    }
    
    h[i]=key;
    
   QuickSort(h,left,i-1);
    QuickSort(h,j+1,right);
 }

//另外一种快排
#include <iostream>
#include <vector>
using namespace std;
void swap(int &a,int &b)
{
	int temp=a;
	a=b;
	b=temp;
}

int partion(int left,int right,vector<int>&array)
{
	int pivot=array[right];
	int i=left-1;
	for(int j=left;j<right;j++)
	{
		if(array[j]<=pivot)
		{
			i++;
			swap(array[i],array[j]);
		}
	}
	swap(array[i+1],array[right]);
	return i+1;
}
void quicksort(int left,int right,vector<int>&array)
{
	if(left<right)
	{
		int p=partion(left,right,array);
		quicksort(left,p-1,array);
		quicksort(p+1,right,array);
	}
	
}



int main()
{
	vector<int> array{1,5,2,8,12,3,6,7,20};
	quicksort(0,array.size()-1,array);
    for(int i=0;i<array.size();i++)
	{
		cout<<array[i]<<endl;
	}
    return 0;
}
