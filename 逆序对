
思路分析：
看到这个题目，我们的第一反应是顺序扫描整个数组。每扫描到一个数组的时候，逐个比较该数字和它后面的数字的大小。如果后面的数字比它小，
则这两个数字就组成了一个逆序对。假设数组中含有n个数字。由于每个数字都要和O(n)这个数字比较，因此这个算法的时间复杂度为O(n^2)。
我们以数组{7,5,6,4}为例来分析统计逆序对的过程。每次扫描到一个数字的时候，我们不拿ta和后面的每一个数字作比较，否则时间复杂度就是O(n^2)，
因此我们可以考虑先比较两个相邻的数字。
  
(a) 把长度为4的数组分解成两个长度为2的子数组；
(b) 把长度为2的数组分解成两个成都为1的子数组；
(c) 把长度为1的子数组 合并、排序并统计逆序对 ；
(d) 把长度为2的子数组合并、排序，并统计逆序对；
在上图（a）和（b）中，我们先把数组分解成两个长度为2的子数组，再把这两个子数组分别拆成两个长度为1的子数组。接下来一边合并相邻的子数组，
一边统计逆序对的数目。在第一对长度为1的子数组{7}、{5}中7大于5，因此（7,5）组成一个逆序对。同样在第二对长度为1的子数组{6}、{4}中也有逆序对（6,4）。
由于我们已经统计了这两对子数组内部的逆序对，因此需要把这两对子数组 排序 如上图（c）所示， 以免在以后的统计过程中再重复统计。
接下来我们统计两个长度为2的子数组子数组之间的逆序对。合并子数组并统计逆序对的过程如下图如下图所示。
我们先用两个指针分别指向两个子数组的末尾，并每次比较两个指针指向的数字。如果第一个子数组中的数字大于第二个数组中的数字，则构成逆序对，并
且逆序对的数目等于第二个子数组中剩余数字的个数，如下图（a）和（c）所示。如果第一个数组的数字小于或等于第二个数组中的数字，则不构成逆序对，
如图b所示。每一次比较的时候，我们都把较大的数字从后面往前复制到一个辅助数组中，确保 辅助数组（记为copy） 中的数字是递增排序的。在把较大的数字复制
到辅助数组之后，把对应的指针向前移动一位，接下来进行下一轮比较。
 
过程：先把数组分割成子数组，先统计出子数组内部的逆序对的数目，然后再统计出两个相邻子数组之间的逆序对的数目。在统计逆序对的过程中，
还需要对数组进行排序。如果对排序算法很熟悉，我们不难发现这个过程实际上就是归并排序。参考代码如下：

class Solution {
public:
    long long Inversepat(vector<int>&data,vector<int>&num,int start,int end)
    {
        if(start==end)
        {
            num[start]=data[start];
            return 0;
        }
        int mid=(end-start)/2;
        long long count1=Inversepat(num,data,start,start+mid);//注意这里反过来传参 这是故意调换的，递归传入实参需要把copy（已经排序好）传入，
                                                              //data当作辅助数组
                                                              

/*交换copy和data是因为：
1.在每次的操作中，数值的比较都是采用当前传入函数中第一项，也就是data；比较的结果都存放到copy中；也就意味着此时copy中是经过此次调用的结果。
2.从最底层返回时，进入了(start == end)的情形，data 和 copy 完全没有修改，此时copy和data还是一样的。
3.进入倒数第二层时，程序进入上图26行以后部分，copy是部分排序后的新数组，data是旧数组。注意这里都是传值的调用，数组都是直接修改的。
倒数第二层使用的copy其实是倒数第三层中的data,这就确保了倒数第三层进入26行以后时，数据比较使用的data是最新排序的数组。
4. 倒数第三层将排序的结果存入copy中。程序在倒数第四层进入26行后，使用的data数组为刚刚倒数第三层中的最新排序的copy.
5. 也就是说，在每次程序进入26行时，此时的data是最新的排序结果，copy是次新的结果。
   在最后一次进入26行以后时，copy为完整排序后的结果，data是次新的结果。
   然而这里第一个类内函数调用第二个函数时，data和copy的顺序没有改变，所以最后结果应该copy是完整排序的结果.data是差一步完成排序的结果。
   以输入[7,5,6,4], 最后的结果copy[4,5,6,7], data[5,7,4,6].*/
        long long count2=Inversepat(num,data,start+mid+1,end);
        
        int i=start+mid;
        int j=end;
        int index=end;
        long long count=0;
        while(i>=start&&j>=start+mid+1)
        {
            if(data[i]>data[j])
            {
                num[index--]=data[i--];
                count=count+j-start-mid;
            }
            else
            {
                num[index--]=data[j--];
            }
        }
        for(;i>=start;i--)
        {
            num[index--]=data[i];
        }
        for(;j>=start+mid+1;j--)
        {
            num[index--]=data[j];
        }
        return count1+count2+count;
    }
    
    
    
    int InversePairs(vector<int> data) {
          int size=data.size();
        if(size<=0)return 0;
        vector<int> num(data);
        
        long long count=Inversepat(data,num,0,size-1);
        int Icount=count%1000000007;
        return Icount;
    }
};
